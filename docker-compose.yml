version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: deadman-postgres
    environment:
      POSTGRES_DB: deadman_switch
      POSTGRES_USER: deadman_switch_user
      POSTGRES_PASSWORD: deadman_switch_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U deadman_switch_user -d deadman_switch"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: deadman-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Application
  app:
    build: .
    container_name: deadman-app
    environment:
      - DATABASE_URL=postgresql://deadman_switch_user:deadman_switch_password@postgres:5432/deadman_switch
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production-make-it-long-and-random
      - ENVIRONMENT=production
      - HOST=0.0.0.0
      - PORT=8000
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_data:/app/data
    restart: unless-stopped

  # Background Worker (for future use)
  worker:
    build: .
    container_name: deadman-worker
    environment:
      - DATABASE_URL=postgresql://deadman_switch_user:deadman_switch_password@postgres:5432/deadman_switch
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production-make-it-long-and-random
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uv run celery -A deadman_switch.worker worker --loglevel=info
    restart: unless-stopped
    profiles:
      - worker  # Optional service, start with: docker-compose --profile worker up

volumes:
  postgres_data:
  redis_data:
  app_data:
